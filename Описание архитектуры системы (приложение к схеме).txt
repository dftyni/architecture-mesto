Описание архитектуры системы (приложение к схеме):

На представленной схеме изображена архитектура распределённой информационной системы, реализующей шардирование и репликацию в MongoDB, с балансировкой запросов, кэшированием и использованием CDN.

Компоненты и их назначение
- nginx-cdn (CDN) — отдаёт статические ресурсы (например, иконки) напрямую, снижая нагрузку на API
- nginx (gateway) — основной входной шлюз в систему. 
                    Принимает HTTP-запросы и распределяет их между экземплярами API-сервиса
- pymongo-api / pymongo-api-2 — два экземпляра FastAPI-сервиса. 
                                Они взаимодействуют с MongoDB через mongos, используют Redis как кэш, и регистрируются в Consul
- redis — реализует кэширование ответов API, ускоряя доступ к данным и снижая нагрузку на базу
- mongos — маршрутизатор MongoDB, принимающий запросы от API и перенаправляющий их на нужные шарды
- configsvr — конфигурационный сервер кластера MongoDB, хранит метаинформацию о шардах и коллекциях
- shard1RS / shard2RS — два реплицированных шарда. 
                        Каждый из них представляет собой Replica Set с тремя членами (один primary и два secondary)
- consul — система Service Discovery. 
           Позволяет API-инстансам регистрироваться и быть автоматически обнаруженными шлюзом

Логика взаимодействия: клиент отправляет HTTP-запрос, nginx (gateway) с помощью Consul выбирает доступный экземпляр API и проксирует туда запрос

API-сервис:
- сначала проверяет Redis (если ответ кэширован — возвращает его);
- если данных в кеше нет — делает запрос к MongoDB через mongos;
- сохраняет результат в Redis для ускорения последующих запросов. Ответ возвращается клиенту через nginx.

Я отошёл от упрощённого варианта из задания и реализовал более реалистичную и развёрнутую схему, добавив Service Discovery (Consul), балансировку через NGINX и кеширование через Redis. Это позволяет не только глубже понять архитектурные паттерны, но и собрать систему, приближенную к тем, что используются в реальных проектах.