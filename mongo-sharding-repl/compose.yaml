name: mongo-sharding-repl

services:

  #
  # Mongo Config Server
  #

  configSrv:
    image: mongo:latest
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.18.0.7
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #
  # Mongo shard 1
  #

  shard1-repl1:
    image: mongo:latest
    container_name: shard1-repl1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.18.0.8
    volumes:
      - shard1-repl1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # replica
  shard1-repl2:
    image: mongo:latest
    container_name: shard1-repl2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.18.0.9
    volumes:
      - shard1-repl2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #
  # Mongo shard 2
  #

  shard2-repl1:
    image: mongo:latest
    container_name: shard2-repl1
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.18.0.10
    volumes:
      - shard2-repl1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # replica
  shard2-repl2:
    image: mongo:latest
    container_name: shard2-repl2
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.18.0.11
    volumes:
      - shard2-repl2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #
  # Router
  #

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.18.0.12
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #
  # App
  #

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - shard1-repl1
      - shard1-repl2
      - shard2-repl1
      - shard2-repl2
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.18.0.13
    environment:
      MONGODB_URL: "mongodb://mongos_router:27022"
      MONGODB_DATABASE_NAME: "somedb"


networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16


volumes:
  config-data:
  shard1-repl1-data:
  shard1-repl2-data:
  shard2-repl1-data:
  shard2-repl2-data: