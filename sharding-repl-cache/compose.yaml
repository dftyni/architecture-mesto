name: sharding-repl-cache

services:
  configSrv:
    image: mongo:latest
    container_name: configSrv 
    restart: on-failure
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh configSrv:27017/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard1_1-data:/data/db
    command:
      [
        "--shardsvr", 
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard1_1:27018/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1_2-data:/data/db
    command:
      [
        "--shardsvr", 
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard1_2:27019/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1_3-data:/data/db
    command:
      [
        "--shardsvr", 
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard1_3:27021/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard2_1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all", 
        "--port",
        "27022"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard2_1:27022/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard2_2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all", 
        "--port",
        "27023"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard2_2:27023/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2_3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all", 
        "--port",
        "27024"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh shard2_3:27024/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongos_router:27020/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  redis1:
    image: "redis:latest"
    container_name: redis1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.110

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.111
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis1:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
  shard2_1-data:
  shard2_2-data:
  shard2_3-data:
  redis_1_data:
 