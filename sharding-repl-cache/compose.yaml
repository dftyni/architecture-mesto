name: sharding-repl-cache

services:

  #shard 0

  shard0-replica0:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard0
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard0-replica0
    environment:
      - REPSET_NAME=shard0
      - DO_INIT_REPSET=true
    expose:
      - "27017"

  shard0-replica1:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard0
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard0-replica1
    environment:
      - REPSET_NAME=shard0
    expose:
      - "27017"

  shard0-replica2:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard0
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard0-replica2
    environment:
      - REPSET_NAME=shard0
    expose:
      - "27017"

# shard 1

  shard1-replica0:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard1
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard1-replica0
    environment:
      - REPSET_NAME=shard1
      - DO_INIT_REPSET=true
    expose:
      - "27017"

  shard1-replica1:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard1
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard1-replica1
    environment:
      - REPSET_NAME=shard1
    expose:
      - "27017"

  shard1-replica2:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --shardsvr --replSet shard1
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - shard1-replica2
    environment:
      - REPSET_NAME=shard1
    expose:
      - "27017"

  configdb-replica0:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --configsvr --replSet configdb
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - configdb-replica0
    environment:
      - REPSET_NAME=configdb
      - DO_INIT_REPSET=true
    expose:
      - "27017"

  configdb-replica1:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --configsvr --replSet configdb
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - configdb-replica1
    environment:
      - REPSET_NAME=configdb
    expose:
      - "27017"

  configdb-replica2:
    build:
      context: mongod
    command: mongod -f /etc/mongod.conf --configsvr --replSet configdb
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./mongod/mongod.conf:/etc/mongod.conf
    networks:
      internalnetwork:
        aliases:
          - configdb-replica2
    environment:
      - REPSET_NAME=configdb
    expose:
      - "27017"

  mongos-router0:
    build:
      context: mongos
    command: mongos --port 27017 --bind_ip 0.0.0.0 --configdb "configdb/configdb-replica0:27017,configdb-replica1:27017,configdb-replica2:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - shard0-replica0
      - shard0-replica1
      - shard0-replica2
      - shard1-replica0
      - shard1-replica1
      - shard1-replica2
      - configdb-replica0
      - configdb-replica1
      - configdb-replica2
    networks:
      internalnetwork:
        aliases:
          - mongos-router0
    environment:
      - SHARD_LIST=shard0/shard0-replica0:27017,shard0-replica1:27017,shard0-replica2:27017;shard1/shard1-replica0:27017,shard1-replica1:27017,shard1-replica2:27017
    expose:
      - "27017"
    ports:
      - "27017:27017"

  mongos-router1:
    build:
      context: mongos
    command: mongos --port 27017 --bind_ip 0.0.0.0 --configdb "configdb/configdb-replica0:27017,configdb-replica1:27017,configdb-replica2:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      internalnetwork:
        aliases:
          - mongos-router1
    environment:
      - SHARD_LIST=shard0/shard0-replica0:27017,shard0-replica1:27017,shard0-replica2:27017;shard1/shard1-replica0:27017,shard1-replica1:27017,shard1-replica2:27017
    expose:
      - "27017"
    ports:
      - "27018:27017"

  redis_single:
    image: redis:7.0
    container_name: redis_single
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - internalnetwork

  pymongo_api:
    container_name: pymongo_api
    build:
      context: app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos-router0
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos-router0:27017,mongos-router1:27017"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_single:6379"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - internalnetwork

networks:
  internalnetwork: {}

volumes:
  redis_data: