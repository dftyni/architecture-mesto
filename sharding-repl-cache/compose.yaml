name: sharding-repl-cache

services:
  # Config Server Replica Set
  configSrv1:
    image: mongo:latest
    container_name: configSrv1
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - configSrv1-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]

  configSrv2:
    image: mongo:latest
    container_name: configSrv2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - configSrv2-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]

  configSrv3:
    image: mongo:latest
    container_name: configSrv3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - configSrv3-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]

  # Shard 1 Replica Set
  shard1a:
    image: mongo:latest
    container_name: shard1a
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1a-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]

  shard1b:
    image: mongo:latest
    container_name: shard1b
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1b-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]

  shard1c:
    image: mongo:latest
    container_name: shard1c
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard1c-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]

  shard2a:
    image: mongo:latest
    container_name: shard2a
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2a-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]

  shard2b:
    image: mongo:latest
    container_name: shard2b
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2b-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]

  shard2c:
    image: mongo:latest
    container_name: shard2c
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2c-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]

  # Mongos Router
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv1:27017,configSrv2:27017,configSrv3:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    depends_on:
      - mongos_router
    networks:
      app-network:
        ipv4_address: 173.17.0.21

  # PyMongo API
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"
    networks:
      app-network:

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  configSrv1-data:
  configSrv2-data:
  configSrv3-data:
  shard1a-data:
  shard1b-data:
  shard1c-data:
  shard2a-data:
  shard2b-data:
  shard2c-data:
