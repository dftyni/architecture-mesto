services:

  #сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - 27020:27020
    networks:
      - mongo-sharded
    volumes:
      - config-data:/data/db
    command:
      [
        "mongod",
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард
  shard1_node1:
    image: mongo:latest
    container_name: shard1_node1
    restart: always
    ports:
      - 27018:27018
    networks:
      - mongo-sharded
    volumes:
      - shard1-node1-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_node2:
    image: mongo:latest
    container_name: shard1_node2
    restart: always
    ports:
      - 27021:27021
    networks:
      - mongo-sharded
    volumes:
      - shard1-node2-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_node3:
    image: mongo:latest
    container_name: shard1_node3
    restart: always
    ports:
      - 27022:27022
    networks:
      - mongo-sharded
    volumes:
      - shard1-node3-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард
  shard2_node1:
    image: mongo:latest
    container_name: shard2_node1
    restart: always
    ports:
      - 27019:27019
    networks:
      - mongo-sharded
    volumes:
      - shard2-node1-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_node2:
    image: mongo:latest
    container_name: shard2_node2
    restart: always
    ports:
      - 27023:27023
    networks:
      - mongo-sharded
    volumes:
      - shard2-node2-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_node3:
    image: mongo:latest
    container_name: shard2_node3
    restart: always
    ports:
      - 27024:27024
    networks:
      - mongo-sharded
    volumes:
      - shard2-node3-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos:
    image: mongo:latest
    container_name: mongos
    restart: always
    ports:
      - 27017:27017
    networks:
      - mongo-sharded
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27020", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    depends_on:
      - configSrv
      - shard1_node1
      - shard2_node1
  
  # Redis Single Node
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mongo-sharded

  sharding-repl-cache:
    container_name: sharding-repl-cache
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos
    ports:
      - 8080:8080
    networks:
      - mongo-sharded
    environment:
      MONGODB_URL: "mongodb://mongos"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

networks:
  mongo-sharded:
    driver: bridge

volumes:
  config-data:
  shard1-node1-data:
  shard1-node2-data:
  shard1-node3-data:
  shard2-node1-data:
  shard2-node2-data:
  shard2-node3-data:
